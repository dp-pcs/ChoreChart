generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String
  password             String?
  role                 UserRole
  familyId             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  preferences          Json?
  currentLoginStreak   Int                   @default(0)
  longestLoginStreak   Int                   @default(0)
  lastLoginDate        DateTime?
  currentCheckInStreak Int                   @default(0)
  longestCheckInStreak Int                   @default(0)
  lastCheckInDate      DateTime?
  totalPoints          Int                   @default(0)
  level                Int                   @default(1)
  experiencePoints     Int                   @default(0)
  streakFreezes        Int                   @default(0)
  lastStreakFreezeUsed DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?             @db.Timestamp(6)
  availablePoints      Decimal               @default(0) @db.Decimal(10,2)
  lifetimePoints       Decimal               @default(0) @db.Decimal(10,2)
  bankedPoints         Decimal               @default(0) @db.Decimal(10,2)
  bankedMoney          Decimal               @default(0) @db.Decimal(10,2)
  choreApprovals       ChoreApproval[]
  choreAssignments     ChoreAssignment[]
  choreSubmissions     ChoreSubmission[]
  correctiveBehaviors  CorrectiveBehavior[]  @relation("ChildBehavior")
  loggedBehaviors      CorrectiveBehavior[]  @relation("ParentLogger")
  familyMemberships    FamilyMembership[]
  impromptuSubmissions ImpromptuSubmission[]
  messages             Message[]
  realWorldActivities  RealWorldActivity[]   @relation("ChildActivity")
  loggedActivities     RealWorldActivity[]   @relation("ParentLogger")
  rewards              Reward[]
  achievements         UserAchievement[]
  family               Family                @relation(fields: [familyId], references: [id], onDelete: Cascade)
  weeklyReports        WeeklyReport[]
  parentalFeedbacks   ParentalFeedback[]    @relation("ChildFeedback")
  feedbackLogs         ParentalFeedback[]    @relation("ParentFeedbackLogger")
  importantEvents      ImportantEvent[]
  sentInvitations      FamilyInvitation[]
  pointTransactions    PointTransaction[]
  processedTransactions PointTransaction[] @relation("TransactionProcessor")
  choreCompletions     ChoreCompletion[]
  completionActions    ChoreCompletion[]  @relation("CompletionActions")

  @@map("users")
}

model FamilyMembership {
  id          String   @id @default(cuid())
  userId      String
  familyId    String
  role        String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
  isActive    Boolean  @default(true)
  isPrimary   Boolean  @default(false)
  canInvite   Boolean  @default(false)
  canManage   Boolean  @default(false)
  permissions Json?
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_memberships")
}

model Family {
  id                   String             @id @default(cuid())
  name                 String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  weeklyAllowance      Float              @default(0)
  autoApproveChores    Boolean            @default(false)
  weekCloseDay         Int                @default(0)
  emailNotifications   Boolean            @default(true)
  enableStreaks        Boolean            @default(true)
  enableLeaderboard    Boolean            @default(true)
  enableAchievements   Boolean            @default(true)
  streakFreezeLimit    Int                @default(3)
  allowMultipleParents Boolean            @default(true)
  shareReports         Boolean            @default(false)
  crossFamilyApproval  Boolean            @default(false)
  pointsToMoneyRate    Float              @default(1.00)
  enablePointsSystem   Boolean            @default(true)
  baseAllowance        Decimal            @default(0) @db.Decimal(10,2)
  stretchAllowance     Decimal            @default(0) @db.Decimal(10,2)
  allowBudgetOverrun   Boolean            @default(true)
  achievements         Achievement[]
  choreAssignments     ChoreAssignment[]
  chores               Chore[]
  familyMemberships    FamilyMembership[]
  familyInvitations    FamilyInvitation[]
  messages             Message[]
  users                User[]
  weeklyReports        WeeklyReport[]
  importantEvents      ImportantEvent[]

  @@map("families")
}

model Chore {
  id               String            @id @default(cuid())
  familyId         String
  title            String
  description      String?
  type             ChoreType
  frequency        ChoreFrequency
  isRequired       Boolean           @default(false)
  reward           Decimal           @default(0) @db.Decimal(10,2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  scheduledDays    Int[]
  scheduledTime    String?
  estimatedMinutes Int?
  points           Decimal           @default(0) @db.Decimal(10,2)
  priority         ChorePriority     @default(MEDIUM)
  assignments      ChoreAssignment[]
  family           Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("chores")
}

model ChoreAssignment {
  id          String            @id @default(cuid())
  familyId    String
  userId      String
  choreId     String
  weekStart   DateTime
  createdAt   DateTime          @default(now())
  chore       Chore             @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family      Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions ChoreSubmission[]

  @@unique([userId, choreId, weekStart])
  @@map("chore_assignments")
}

model ChoreSubmission {
  id            String           @id @default(cuid())
  assignmentId  String
  userId        String
  submittedAt   DateTime         @default(now())
  completedAt   DateTime
  notes         String?
  imageUrl      String?
  status        SubmissionStatus @default(PENDING)
  score         Int?
  partialReward Decimal?          @db.Decimal(10,2)
  pointsAwarded Decimal?          @db.Decimal(10,2)
  approval      ChoreApproval?
  assignment    ChoreAssignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chore_submissions")
}

model ChoreApproval {
  id             String          @id @default(cuid())
  submissionId   String          @unique
  approvedBy     String
  approvedAt     DateTime        @default(now())
  approved       Boolean
  feedback       String?
  score          Int?
  partialReward  Decimal?          @db.Decimal(10,2)
  originalReward Decimal?          @db.Decimal(10,2)
  pointsAwarded  Decimal?          @db.Decimal(10,2)
  originalPoints Decimal?          @db.Decimal(10,2)
  approver       User            @relation(fields: [approvedBy], references: [id], onDelete: Cascade)
  submission     ChoreSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("chore_approvals")
}

model Message {
  id        String      @id @default(cuid())
  familyId  String
  fromId    String
  toId      String?
  content   String
  type      MessageType @default(CHAT)
  createdAt DateTime    @default(now())
  readAt    DateTime?
  family    Family      @relation(fields: [familyId], references: [id], onDelete: Cascade)
  from      User        @relation(fields: [fromId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Reward {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  amount      Float
  type        RewardType @default(MONEY)
  awardedAt   DateTime   @default(now())
  awardedBy   String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rewards")
}

model WeeklyReport {
  id                String   @id @default(cuid())
  familyId          String
  userId            String
  weekStart         DateTime
  weekEnd           DateTime
  generatedAt       DateTime @default(now())
  totalChores       Int
  completedChores   Int
  approvedChores    Int
  deniedChores      Int
  totalEarnings     Float
  potentialEarnings Float
  aiInsights        Json?
  recommendations   String?
  family            Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart])
  @@map("weekly_reports")
}

model Achievement {
  id                String                @id @default(cuid())
  familyId          String
  title             String
  description       String
  icon              String
  type              AchievementType
  category          AchievementCategory
  difficulty        AchievementDifficulty
  points            Int                   @default(0)
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  requirements      Json
  rewardType        RewardType            @default(MONEY)
  rewardAmount      Float                 @default(0)
  rewardDescription String?
  family            Family                @relation(fields: [familyId], references: [id], onDelete: Cascade)
  userAchievements  UserAchievement[]

  @@index([familyId])
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Float       @default(0)
  isCompleted   Boolean     @default(false)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([achievementId])
  @@index([userId])
  @@map("user_achievements")
}

model ImpromptuSubmission {
  id            String                    @id @default(cuid())
  childId       String
  title         String
  description   String
  submittedAt   DateTime                  @default(now())
  status        ImpromptuSubmissionStatus @default(PENDING)
  responseAt    DateTime?
  parentNote    String?
  pointsAwarded Decimal?          @db.Decimal(10,2)
  child         User                      @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@index([childId])
  @@index([status])
  @@map("impromptu_submissions")
}

model RealWorldActivity {
  id          String   @id @default(cuid())
  childId     String
  parentId    String
  title       String
  description String?
  occurredAt  DateTime
  loggedAt    DateTime @default(now())
  points      Int      @default(0)
  child       User     @relation("ChildActivity", fields: [childId], references: [id], onDelete: Cascade)
  parent      User     @relation("ParentLogger", fields: [parentId], references: [id], onDelete: Cascade)

  @@index([childId])
  @@index([occurredAt])
  @@index([parentId])
  @@map("real_world_activities")
}

model CorrectiveBehavior {
  id             String           @id @default(cuid())
  childId        String
  parentId       String
  behavior       String
  description    String?
  occurredAt     DateTime
  loggedAt       DateTime         @default(now())
  severity       BehaviorSeverity @default(MINOR)
  status         BehaviorStatus   @default(NOTED)
  actionTaken    String?
  pointsDeducted Int?
  child          User             @relation("ChildBehavior", fields: [childId], references: [id], onDelete: Cascade)
  parent         User             @relation("ParentLogger", fields: [parentId], references: [id], onDelete: Cascade)

  @@index([childId])
  @@index([occurredAt])
  @@index([parentId])
  @@index([status])
  @@map("corrective_behaviors")
}

model ParentalFeedback {
  id          String        @id @default(cuid())
  childId     String
  parentId    String
  title       String
  description String?
  type        FeedbackType  @default(NEUTRAL)
  occurredAt  DateTime
  loggedAt    DateTime      @default(now())
  points      Decimal?             @db.Decimal(10,2)
  child       User          @relation("ChildFeedback", fields: [childId], references: [id], onDelete: Cascade)
  parent      User          @relation("ParentFeedbackLogger", fields: [parentId], references: [id], onDelete: Cascade)

  @@index([childId])
  @@index([occurredAt])
  @@index([parentId])
  @@index([type])
  @@map("parental_feedback")
}

model ImportantEvent {
  id          String           @id @default(cuid())
  familyId    String
  title       String
  description String?
  eventDate   DateTime
  eventType   ImportantEventType @default(GENERAL)
  priority    EventPriority    @default(MEDIUM)
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isAllDay    Boolean          @default(true)
  reminderDays Int[]           @default([7, 3, 1]) // Days before to show reminders
  family      Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  creator     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([eventDate])
  @@index([createdBy])
  @@map("important_events")
}

model FamilyInvitation {
  id                String           @id @default(cuid())
  email             String?          // Made optional since we can invite by phone
  phoneNumber       String?          // Added phone number field
  familyId          String
  invitedBy         String
  inviteToken       String           @unique
  inviteTokenExpiry DateTime
  role              UserRole         @default(PARENT)
  canInvite         Boolean          @default(false)
  canManage         Boolean          @default(false)
  isForExistingUser Boolean          @default(false)
  inviteMethod      InviteMethod     @default(EMAIL)
  acceptedAt        DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  family            Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  inviter           User             @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([inviteToken])
  @@index([email])
  @@index([phoneNumber])
  @@map("family_invitations")
}

model PointTransaction {
  id            String                @id @default(cuid())
  userId        String
  familyId      String
  amount        Decimal               @db.Decimal(10,2)
  type          PointTransactionType
  status        TransactionStatus     @default(PENDING)
  reason        String?
  submittedAt   DateTime              @default(now())
  processedAt   DateTime?
  processedBy   String?
  description   String
  moneyValue    Decimal?              @db.Decimal(10,2)
  pointRate     Decimal?              @db.Decimal(10,2)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  processor     User?                 @relation("TransactionProcessor", fields: [processedBy], references: [id])

  @@index([userId])
  @@index([familyId])
  @@index([status])
  @@index([type])
  @@map("point_transactions")
}

model ChoreCompletion {
  id            String                @id @default(cuid())
  userId        String
  choreId       String
  familyId      String
  scheduledDate DateTime
  status        ChoreCompletionStatus @default(ASSIGNED)
  submittedAt   DateTime?
  completedAt   DateTime?
  reason        String?
  parentAction  ParentAction?
  actionBy      String?
  actionAt      DateTime?
  deferredTo    DateTime?
  points        Decimal?              @db.Decimal(10,2)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionUser    User?                 @relation("CompletionActions", fields: [actionBy], references: [id])

  @@unique([userId, choreId, scheduledDate])
  @@index([userId])
  @@index([choreId])
  @@index([status])
  @@index([scheduledDate])
  @@map("chore_completions")
}

enum UserRole {
  PARENT
  CHILD
}

enum ChoreType {
  DAILY
  WEEKLY
  ONE_TIME
  CUSTOM
}

enum ChoreFrequency {
  DAILY
  WEEKLY
  MONTHLY
  AS_NEEDED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  DENIED
  AUTO_APPROVED
}

enum MessageType {
  CHAT
  SYSTEM
  REMINDER
  REWARD_NOTIFICATION
}

enum RewardType {
  MONEY
  PRIVILEGE
  ITEM
  EXPERIENCE
}

enum AchievementType {
  STREAK
  MILESTONE
  BEHAVIOR
  COMPLETION
  SPECIAL
}

enum AchievementCategory {
  LOGIN
  CHECK_IN
  CHORES
  CONSISTENCY
  IMPROVEMENT
  SOCIAL
  LEARNING
}

enum AchievementDifficulty {
  EASY
  MEDIUM
  HARD
  LEGENDARY
}

enum ImpromptuSubmissionStatus {
  PENDING
  ACKNOWLEDGED
  REWARDED
  DENIED
}

enum BehaviorSeverity {
  MINOR
  MODERATE
  MAJOR
}

enum BehaviorStatus {
  NOTED
  ACTION_TAKEN
  RESOLVED
}

enum FeedbackType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum ImportantEventType {
  GENERAL
  BIRTHDAY
  ANNIVERSARY
  MEETING
  REMINDER
  OTHER
}

enum EventPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InviteMethod {
  EMAIL
  SMS
}

enum PointTransactionType {
  EARNED          // Points earned from chores/feedback
  BANKING_REQUEST // Child requesting to bank points for money
  BANKING_APPROVED// Parent approved banking request
  BANKING_DENIED  // Parent denied banking request
  DEDUCTION       // Points deducted for behavior/poor performance
  BONUS           // Extra points awarded
  TRANSFER        // Points transferred between siblings
  ADJUSTMENT      // Manual adjustment by parent
}

enum TransactionStatus {
  PENDING
  APPROVED
  DENIED
  COMPLETED
  CANCELLED
}

enum ChoreCompletionStatus {
  ASSIGNED
  COMPLETED
  NOT_COMPLETED
  EXCUSED
  DEFERRED
  OVERDUE
}

enum ChorePriority {
  LOW
  MEDIUM
  HIGH
}

enum ParentAction {
  EXCUSE
  DENY_INCOMPLETE
  DEFER
  APPROVE_INCOMPLETE
}
